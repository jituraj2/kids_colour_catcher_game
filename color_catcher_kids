<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Kids Color Catcher Game</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
      background: #f0f8ff;
      display: flex;
      flex-direction: column;
      align-items: center;
      height: 100vh;
      overflow: hidden;
    }

    #gameArea {
      position: relative;
      width: 90vw;
      max-width: 500px;
      height: 70vh;
      background: #fff;
      border: 2px solid #333;
      overflow: hidden;
      margin-top: 10px;
    }

    #basket {
      position: absolute;
      bottom: 10px;
      left: 50%;
      transform: translateX(-50%);
      width: 60px;
      height: 30px;
      background: #333;
      border-radius: 8px;
    }

    .ball {
      position: absolute;
      top: 0;
      width: 30px;
      height: 30px;
      border-radius: 50%;
    }

    #scoreBoard {
      margin-top: 10px;
      font-size: 18px;
      font-weight: bold;
    }

    #startScreen, #gameOverScreen {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.7);
      color: #fff;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 10;
    }

    button {
      padding: 10px 20px;
      font-size: 16px;
      margin-top: 10px;
      border: none;
      border-radius: 8px;
      background: #28a745;
      color: white;
      cursor: pointer;
    }

    button:active {
      transform: scale(0.95);
    }

    #controls {
      display: flex;
      justify-content: space-between;
      width: 90vw;
      max-width: 500px;
      margin-top: 10px;
    }

    .arrowBtn {
      width: 80px;
      height: 60px;
      font-size: 24px;
      border-radius: 12px;
      background: #007bff;
      color: white;
      border: none;
      cursor: pointer;
    }

    #musicBtn {
      position: absolute;
      top: 10px;
      right: 10px;
      font-size: 20px;
      background: none;
      border: none;
      cursor: pointer;
    }

    #hint {
      font-size: 14px;
      color: yellow;
      margin-top: 8px;
    }
  </style>
</head>
<body>
  <h2>üé® Kids Color Catcher Game üéÆ</h2>
  <div id="gameArea">
    <div id="basket"></div>
    <div id="startScreen">
      <h2>Welcome!</h2>
      <p>Tap Start to begin</p>
      <button onclick="startGame()">Start Game</button>
      <button id="musicBtn" onclick="toggleMusic()">üîá</button>
      <div id="hint"></div>
    </div>
    <div id="gameOverScreen" style="display:none;">
      <h2>Game Over!</h2>
      <p id="finalScore"></p>
      <button onclick="restartGame()">Restart</button>
    </div>
  </div>
  <div id="scoreBoard">Score: 0</div>

  <!-- Mobile Controls -->
  <div id="controls">
    <button class="arrowBtn" onclick="moveLeft()">‚¨ÖÔ∏è</button>
    <button class="arrowBtn" onclick="moveRight()">‚û°Ô∏è</button>
  </div>

  <!-- Background Music -->
  <audio id="bgMusic" 
         src="https://cdn.pixabay.com/audio/2022/03/15/audio_c4eb480c96.mp3" 
         preload="auto" loop playsinline></audio>

<script>
  const gameArea = document.getElementById("gameArea");
  const basket = document.getElementById("basket");
  const scoreBoard = document.getElementById("scoreBoard");
  const startScreen = document.getElementById("startScreen");
  const gameOverScreen = document.getElementById("gameOverScreen");
  const finalScore = document.getElementById("finalScore");
  const bgMusic = document.getElementById("bgMusic");
  const musicBtn = document.getElementById("musicBtn");

  let score = 0;
  let gameStarted = false;
  let basketSpeed = 20;
  let gameInterval;
  let animationFrame;

  const colors = ["red", "blue", "green", "yellow", "purple"];
  let targetColor = colors[Math.floor(Math.random() * colors.length)];

  // Unlock audio on first user tap (important for WebView/iOS/Android)
  document.addEventListener("click", () => {
    if (bgMusic.paused) {
      bgMusic.play().then(() => {
        bgMusic.pause(); // unlock once
      }).catch(() => {});
    }
  }, { once: true });

  function toggleMusic() {
    if (bgMusic.paused) {
      bgMusic.play()
        .then(() => { musicBtn.textContent = "üéµ"; })
        .catch(() => { document.getElementById("hint").textContent = "üéµ Tap again to enable music!"; });
    } else {
      bgMusic.pause();
      musicBtn.textContent = "üîá";
    }
  }

  function speak(text) {
    if ('speechSynthesis' in window) {
      window.speechSynthesis.cancel();
      const msg = new SpeechSynthesisUtterance(text);
      msg.rate = 1;
      msg.pitch = 1;
      window.speechSynthesis.speak(msg);
    }
  }

  function startGame() {
    startScreen.style.display = "none";
    gameOverScreen.style.display = "none";
    gameStarted = true;
    score = 0;
    scoreBoard.textContent = "Score: " + score;

    // Start background music if allowed
    bgMusic.play().catch(()=>{});

    // Announce target color
    setTimeout(() => { speak("Catch " + targetColor); }, 500);

    gameInterval = setInterval(createBall, 1200);
    gameLoop();
  }

  function createBall() {
    const ball = document.createElement("div");
    ball.classList.add("ball");
    ball.style.background = colors[Math.floor(Math.random() * colors.length)];
    ball.style.left = Math.random() * (gameArea.clientWidth - 30) + "px";
    ball.speed = 2 + Math.random() * 2;
    gameArea.appendChild(ball);
  }

  function gameLoop() {
    if (!gameStarted) return;
    const balls = document.querySelectorAll(".ball");
    balls.forEach(ball => {
      let top = parseFloat(ball.style.top || 0);
      top += ball.speed;
      ball.style.top = top + "px";

      // Collision detection
      if (top + 30 >= gameArea.clientHeight - 40) {
        let basketRect = basket.getBoundingClientRect();
        let ballRect = ball.getBoundingClientRect();

        if (ballRect.left < basketRect.right && ballRect.right > basketRect.left) {
          if (ball.style.background === targetColor) {
            score += 10;
          } else {
            endGame();
          }
          scoreBoard.textContent = "Score: " + score;
          ball.remove();
        } else if (top > gameArea.clientHeight) {
          ball.remove();
        }
      }
    });
    animationFrame = requestAnimationFrame(gameLoop);
  }

  function endGame() {
    gameStarted = false;
    clearInterval(gameInterval);
    cancelAnimationFrame(animationFrame);
    finalScore.textContent = "Your Score: " + score;
    gameOverScreen.style.display = "flex";
    bgMusic.pause();
  }

  function restartGame() {
    document.querySelectorAll(".ball").forEach(ball => ball.remove());
    targetColor = colors[Math.floor(Math.random() * colors.length)];
    startGame();
  }

  // Controls
  function moveLeft() {
    let left = basket.offsetLeft - basketSpeed;
    if (left >= 0) basket.style.left = left + "px";
  }

  function moveRight() {
    let left = basket.offsetLeft + basketSpeed;
    if (left + basket.offsetWidth <= gameArea.clientWidth) {
      basket.style.left = left + "px";
    }
  }

  // Keyboard controls
  document.addEventListener("keydown", (e) => {
    if (e.key === "ArrowLeft") moveLeft();
    if (e.key === "ArrowRight") moveRight();
  });
</script>
</body>
</html>
