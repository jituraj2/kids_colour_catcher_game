<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Kids Color Catcher Game</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      background: linear-gradient(to bottom, #87ceeb, #f0f8ff);
      overflow: hidden;
    }

    #gameContainer {
      position: relative;
      width: 90vw;
      max-width: 480px;
      height: 70vh;
      max-height: 600px;
      border: 3px solid #333;
      border-radius: 15px;
      background: #fff;
      overflow: hidden;
    }

    #basket {
      position: absolute;
      bottom: 10px;
      left: 50%;
      transform: translateX(-50%);
      width: 80px;
      height: 40px;
      background: #ff6347;
      border-radius: 10px;
    }

    .ball {
      position: absolute;
      top: 0;
      width: 30px;
      height: 30px;
      border-radius: 50%;
    }

    #controls {
      margin: 10px;
      display: flex;
      gap: 10px;
    }

    button {
      padding: 10px 15px;
      font-size: 16px;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      background: #4CAF50;
      color: #fff;
    }

    button:active {
      transform: scale(0.95);
    }

    #mobileControls {
      margin-top: 15px;
      display: flex;
      justify-content: center;
      gap: 40px;
    }

    .arrowBtn {
      font-size: 28px;
      padding: 15px 25px;
      border-radius: 50%;
      background: #ff9800;
      color: #fff;
    }

    #gameOverScreen {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.7);
      display: none;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      color: #fff;
      font-size: 22px;
    }

    #gameOverScreen button {
      background: #2196F3;
      margin-top: 15px;
    }
  </style>
</head>
<body>
  <h2>üé® Kids Color Catcher Game</h2>

  <div id="gameContainer">
    <div id="basket"></div>
    <div id="gameOverScreen">
      <p>Game Over!</p>
      <button onclick="restartGame()">Restart</button>
    </div>
  </div>

  <div id="controls">
    <button onclick="startGame()">Start Game</button>
    <button id="musicBtn" onclick="toggleMusic()">üîá</button>
  </div>

  <div id="mobileControls">
    <button class="arrowBtn" onclick="moveBasket('left')">‚¨ÖÔ∏è</button>
    <button class="arrowBtn" onclick="moveBasket('right')">‚û°Ô∏è</button>
  </div>

  <!-- Howler.js -->
  <script src="https://cdn.jsdelivr.net/npm/howler/dist/howler.min.js"></script>

  <script>
    const basket = document.getElementById("basket");
    const gameContainer = document.getElementById("gameContainer");
    const gameOverScreen = document.getElementById("gameOverScreen");
    const musicBtn = document.getElementById("musicBtn");

    let basketX = gameContainer.offsetWidth / 2 - 40;
    let gameInterval, spawnInterval;
    let gameRunning = false;
    let targetColor = "";
    let colors = ["red", "blue", "green", "yellow", "purple"];

    // üéµ Background Music with Howler.js
    const bgSound = new Howl({
      src: ["https://cdn.pixabay.com/audio/2022/03/15/audio_c4eb480c96.mp3"],
      loop: true,
      volume: 0.6,
      html5: true
    });

    function toggleMusic() {
      if (!bgSound.playing()) {
        bgSound.play();
        musicBtn.textContent = "üéµ";
      } else {
        bgSound.pause();
        musicBtn.textContent = "üîá";
      }
    }

    // Unlock audio on first tap
    document.body.addEventListener("click", () => {
      if (!bgSound.playing()) {
        bgSound.play();
        bgSound.pause();
      }
    }, { once: true });

    // Movement
    function moveBasket(dir) {
      if (dir === "left") basketX -= 20;
      if (dir === "right") basketX += 20;

      basketX = Math.max(0, Math.min(gameContainer.offsetWidth - basket.offsetWidth, basketX));
      basket.style.left = basketX + "px";
    }

    // Keyboard controls
    document.addEventListener("keydown", e => {
      if (e.key === "ArrowLeft") moveBasket("left");
      if (e.key === "ArrowRight") moveBasket("right");
    });

    // Game start
    function startGame() {
      if (gameRunning) return;
      gameRunning = true;
      gameOverScreen.style.display = "none";
      targetColor = colors[Math.floor(Math.random() * colors.length)];
      speak("Catch " + targetColor);

      spawnInterval = setInterval(spawnBall, 1500);
      gameInterval = setInterval(updateGame, 50);
    }

    function spawnBall() {
      const ball = document.createElement("div");
      ball.classList.add("ball");
      const color = colors[Math.floor(Math.random() * colors.length)];
      ball.style.background = color;
      ball.dataset.color = color;
      ball.style.left = Math.random() * (gameContainer.offsetWidth - 30) + "px";
      gameContainer.appendChild(ball);
    }

    function updateGame() {
      const balls = document.querySelectorAll(".ball");
      balls.forEach(ball => {
        let top = parseInt(ball.style.top || 0);
        top += 5;
        ball.style.top = top + "px";

        // Collision
        if (
          top + 30 >= gameContainer.offsetHeight - 50 &&
          parseInt(ball.style.left) + 15 > basketX &&
          parseInt(ball.style.left) < basketX + basket.offsetWidth
        ) {
          if (ball.dataset.color === targetColor) {
            targetColor = colors[Math.floor(Math.random() * colors.length)];
            speak("Now catch " + targetColor);
          } else {
            endGame();
          }
          ball.remove();
        }

        // Remove if out of bounds
        if (top > gameContainer.offsetHeight) {
          ball.remove();
        }
      });
    }

    function endGame() {
      clearInterval(gameInterval);
      clearInterval(spawnInterval);
      gameRunning = false;
      gameOverScreen.style.display = "flex";
    }

    function restartGame() {
      document.querySelectorAll(".ball").forEach(b => b.remove());
      basketX = gameContainer.offsetWidth / 2 - 40;
      basket.style.left = basketX + "px";
      startGame();
    }

    // Speech (color prompt)
    function speak(text) {
      let utter = new SpeechSynthesisUtterance(text);
      speechSynthesis.speak(utter);
    }

    // Initialize basket pos
    basket.style.left = basketX + "px";
  </script>
</body>
</html>
